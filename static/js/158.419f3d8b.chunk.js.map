{"version":3,"file":"static/js/158.419f3d8b.chunk.js","mappings":"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","sources":["Apis/movieApi.ts","Components/movies/detailMovie.tsx","Components/movies/movieSlider.tsx"],"sourcesContent":["const API_KEY = process.env.REACT_APP_API_KEY;\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\nexport interface IMovie {\r\n  id: number;\r\n  backdrop_path: string;\r\n  overview: string;\r\n  release_date: string;\r\n  poster_path: string;\r\n  original_title: string;\r\n  title?: string;\r\n  vote_average: number;\r\n}\r\n\r\nexport interface IGetMovies {\r\n  dates: {\r\n    maximum: string;\r\n    minimum: string;\r\n  };\r\n  page: number;\r\n  results: IMovie[];\r\n  total_pages: number;\r\n  total_results: number;\r\n}\r\n\r\nexport interface IGetMovieDetail {\r\n  id: number;\r\n  backdrop_path: string;\r\n  poster_path: string;\r\n  title: string;\r\n  original_title: string;\r\n  overview: string;\r\n  vote_average: number;\r\n  genres: [\r\n    {\r\n      id: number;\r\n      name: string;\r\n    }\r\n  ];\r\n  tagline: string;\r\n}\r\nexport interface IGetMovieCredit {\r\n  id: number;\r\n  cast: [\r\n    {\r\n      id: number;\r\n      name: string;\r\n      original_name: string;\r\n      character: string;\r\n      profile_path: string;\r\n    }\r\n  ];\r\n  crew: [\r\n    {\r\n      id: number;\r\n      known_for_department: string;\r\n      name: string;\r\n      original_name: string;\r\n      profile_path: string;\r\n    }\r\n  ];\r\n}\r\n\r\nexport async function getMovies(kind: string) {\r\n  return await (\r\n    await fetch(\r\n      `${BASE_URL}/movie/${kind}?api_key=${API_KEY}&language=ko&page=1&region=kr`\r\n    )\r\n  ).json();\r\n}\r\nexport async function getMovieDetail(id: string) {\r\n  return await (\r\n    await fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=ko`)\r\n  ).json();\r\n}\r\nexport async function getMovieCredit(id: string) {\r\n  return await (\r\n    await fetch(\r\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=ko`\r\n    )\r\n  ).json();\r\n}\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { makeImagePath } from \"@Utils/utils\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  getMovieCredit,\r\n  getMovieDetail,\r\n  IGetMovieCredit,\r\n  IGetMovieDetail,\r\n} from \"@Apis/movieApi\";\r\nimport { motion, useScroll } from \"framer-motion\";\r\n\r\nconst Overlay = styled(motion.div)`\r\n  position: fixed;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n`;\r\n\r\nconst BigMovie = styled(motion.div)`\r\n  position: absolute;\r\n  width: 55vw;\r\n  height: 60vh;\r\n  left: 0;\r\n  right: 0;\r\n  margin: 0 auto;\r\n  border-radius: 15px;\r\n  background-color: ${(props) => props.theme.black.lighter};\r\n  /* 스크롤바 활성화 및 숨기기 */\r\n  overflow-y: scroll;\r\n  /* -ms-overflow-style: none;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  } */\r\n`;\r\n\r\nconst BigCover = styled.div<{ posterPath: string }>`\r\n  background-image: linear-gradient(to top, black, transparent),\r\n    url(${(props) => makeImagePath(props.posterPath, \"w500\")});\r\n  width: 100%;\r\n  background-size: cover;\r\n  background-position: center center;\r\n  height: 400px;\r\n`;\r\n\r\nconst BigTitle = styled.h3`\r\n  color: ${(props) => props.theme.white.lighter};\r\n  padding: 20px;\r\n  font-size: 40px;\r\n  position: relative;\r\n  text-align: center;\r\n  top: -300px;\r\n`;\r\n\r\nconst BigTitleGenre = styled.div`\r\n  /* margin-top: 30px; */\r\n  top: -250px;\r\n  text-align: center;\r\n  font-size: 18px;\r\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\r\n  position: relative;\r\n  span {\r\n    border-radius: 7px;\r\n    padding: 5px;\r\n    margin: 0 5px;\r\n    color: black;\r\n    font-weight: 800;\r\n    background-color: ${(props) => props.theme.white.lighter};\r\n  }\r\n`;\r\n\r\nconst BigOverview = styled.p`\r\n  margin-top: 30px;\r\n  padding: 20px;\r\n  position: relative;\r\n  top: -140px;\r\n  color: ${(props) => props.theme.white.lighter};\r\n`;\r\n\r\nconst CreditsInfoBox = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 0 30px;\r\n`;\r\n\r\nconst CreditsInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  #title {\r\n    font-size: 28px;\r\n    color: grey;\r\n    margin-bottom: 10px;\r\n  }\r\n  #name {\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\nconst CreditInfoImg = styled.div<{ posterpath: string }>`\r\n  background-image: url(${(props) => props.posterpath});\r\n  background-size: cover;\r\n  background-position: center center;\r\n  background-repeat: no-repeat;\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50px;\r\n  margin: 0 10px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst CreditInfoCast = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  #title {\r\n    font-size: 28px;\r\n    color: grey;\r\n    margin-bottom: 10px;\r\n  }\r\n  #name {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\ninterface IProps {\r\n  dataType: string;\r\n  movieId: string;\r\n  isSearched: boolean;\r\n}\r\n\r\nconst DetailMovie = ({ movieId, dataType, isSearched }: IProps) => {\r\n  console.log(\"movieId123: \", movieId);\r\n  const navigate = useNavigate();\r\n  const onOverayClick = () => (isSearched ? navigate(-1) : navigate(\"/movie\"));\r\n\r\n  const { scrollY } = useScroll();\r\n\r\n  // 캐스팅 정보 API data\r\n  const { isLoading: isCreditLoading, data: creditData } =\r\n    useQuery<IGetMovieCredit>([\"movie\", `${dataType}_credit`], () =>\r\n      getMovieCredit(movieId)\r\n    );\r\n  // 상세정보 API data\r\n  const { isLoading: isDetailLoading, data: detailData } =\r\n    useQuery<IGetMovieDetail>([\"movie\", `${dataType}_detail`], () =>\r\n      getMovieDetail(movieId)\r\n    );\r\n\r\n  useEffect(() => {\r\n    if (creditData) console.log(\"creditData: \", creditData);\r\n  }, [creditData]);\r\n  useEffect(() => {\r\n    if (detailData) console.log(\"detailData: \", detailData);\r\n  }, [detailData]);\r\n\r\n  const DirectorInfo = creditData?.crew.find(\r\n    (item) => item.known_for_department === \"Directing\"\r\n  );\r\n  const CastInfos = creditData?.cast.slice(0, 3);\r\n\r\n  const onClickSearchCast = useCallback((name: string) => {\r\n    window.open(`https://www.google.com/search?q=${name}`);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* 로딩 화면 */}\r\n      {isCreditLoading && isDetailLoading ? (\r\n        <>Loading.....</>\r\n      ) : (\r\n        <>\r\n          {/* 껍대기 부분 */}\r\n          <Overlay\r\n            onClick={onOverayClick}\r\n            exit={{ opacity: 0 }} // 상위 컴포넌트에서 Animate Present 로 감쌌기 때문에 여기서 이 속성이 사용 가능하다.\r\n            animate={{ opacity: 1 }} // movieSlider 에서 사용한 Variants 속성 대신 비교를 위해 이렇게 사용하였다.\r\n          />\r\n          {/* 모달부분 */}\r\n          <BigMovie style={{ top: scrollY.get() + 100 }} layoutId={movieId}>\r\n            {detailData && creditData && (\r\n              <>\r\n                <BigCover // movieSlider 에서 백그라운드 이미지 처리하는 방법과 비교해서 살펴보기\r\n                  posterPath={makeImagePath(detailData.backdrop_path, \"w500\")}\r\n                />\r\n                <BigTitle>{`${detailData?.title}(${detailData?.original_title})`}</BigTitle>\r\n                <BigTitleGenre>\r\n                  {detailData?.genres.map((genre) => (\r\n                    <span key={genre.id}>{genre.name}</span>\r\n                  ))}\r\n                </BigTitleGenre>\r\n                <BigOverview>{detailData?.overview}</BigOverview>\r\n                {/* 아래에 사진부분 추가처리해주기 */}\r\n                <CreditsInfoBox>\r\n                  {DirectorInfo && (\r\n                    <CreditsInfo\r\n                      onClick={() =>\r\n                        onClickSearchCast(DirectorInfo?.original_name)\r\n                      }\r\n                    >\r\n                      <span id=\"title\">Director</span>\r\n                      <CreditInfoImg\r\n                        posterpath={makeImagePath(\r\n                          DirectorInfo?.profile_path ?? \"\"\r\n                        )}\r\n                      />\r\n                      <span id=\"name\">{DirectorInfo?.original_name}</span>\r\n                    </CreditsInfo>\r\n                  )}\r\n                  <CreditInfoCast>\r\n                    {CastInfos?.map((castObj) => (\r\n                      <CreditsInfo\r\n                        key={castObj.id}\r\n                        onClick={() =>\r\n                          onClickSearchCast(castObj?.original_name)\r\n                        }\r\n                      >\r\n                        <span id=\"title\">Actor</span>\r\n                        <CreditInfoImg\r\n                          posterpath={makeImagePath(\r\n                            castObj?.profile_path ?? \"\"\r\n                          )}\r\n                        />\r\n                        <span id=\"name\">{castObj?.original_name}</span>\r\n                      </CreditsInfo>\r\n                    ))}\r\n                  </CreditInfoCast>\r\n                </CreditsInfoBox>\r\n              </>\r\n            )}\r\n          </BigMovie>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DetailMovie;\r\n","import styled from \"styled-components\";\r\nimport { AnimatePresence, motion, useScroll, Variants } from \"framer-motion\";\r\nimport { useState, useCallback, useEffect } from \"react\";\r\nimport { PathMatch, useMatch, useNavigate } from \"react-router-dom\";\r\nimport { IGetMovies } from \"@Apis/movieApi\";\r\nimport { makeImagePath } from \"@Utils/utils\";\r\nimport nextImg from \"@images/next.png\";\r\nimport prevImg from \"@images/prev.png\";\r\nimport DetailMovie from \"./detailMovie\";\r\n\r\nconst Slider = styled.div`\r\n  position: relative;\r\n  top: -100px;\r\n  height: 50vh;\r\n`;\r\n\r\nconst SliderTitle = styled.h2`\r\n  margin-bottom: 20px;\r\n  padding-left: 10px;\r\n  color: white;\r\n  font-weight: 800;\r\n`;\r\n\r\nconst Row = styled(motion.div)`\r\n  display: grid;\r\n  gap: 5px; // 행과 열 사이의 간격을 설정한다. 첫번째가 행, 두번째가 열 의 간격이다.\r\n  grid-template-columns: repeat(\r\n    6,\r\n    1fr\r\n  ); // css grid 에서 열의 정의를 한다. repeat(): 반복되는 패턴을 짧게 줄여준다.\r\n  position: absolute; // 원래 포지션에서 흐름적인 요소가 없이 초기 컨테이너 기준으로 위치를 잡는다.\r\n  width: 100%;\r\n`;\r\n\r\nconst Box = styled(motion.div)<{ bgphoto: string }>`\r\n  background-color: white;\r\n  background-image: url(${(props) => props.bgphoto});\r\n  background-size: cover;\r\n  background-position: center center;\r\n  height: 200px;\r\n  h4 {\r\n    text-align: center;\r\n    font-size: 18px;\r\n  }\r\n  cursor: pointer;\r\n  &:first-child {\r\n    transform-origin: center left;\r\n  }\r\n  &:last-child {\r\n    transform-origin: center right;\r\n  }\r\n`;\r\n\r\nconst BoxInfos = styled(motion.div)`\r\n  position: relative;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  background-color: ${(props) => props.theme.white};\r\n  opacity: 0;\r\n  span {\r\n    text-align: center;\r\n    margin: 2px 0;\r\n    font-size: 6px;\r\n    font-weight: 600;\r\n    text-shadow: none;\r\n  }\r\n  #vote {\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n    color: ${(props) => props.theme.red};\r\n  }\r\n`;\r\n\r\nconst Info = styled(motion.div)`\r\n  padding: 10px;\r\n  background-color: ${(props) => props.theme.black.lighter};\r\n  opacity: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  bottom: 0;\r\n  h4 {\r\n    text-align: center;\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\n// custom 만 바꿔서는 왼쪽으로 움직이고, 오른쪽으로 움직이는게 동작이 되지 않는다!!.\r\n// 아래의 css 변수에서 x 축의 방향을 처리해 주고 custom 에서 방향을 정해줘야 한다!!\r\nconst rowVariants: Variants = {\r\n  hidden: (isNext: boolean) => ({\r\n    x: isNext ? window.outerWidth + 5 : -window.outerWidth - 5,\r\n  }),\r\n  visible: {\r\n    x: 0,\r\n  },\r\n  exit: (isNext: boolean) => ({\r\n    x: isNext ? -window.outerWidth - 5 : window.outerWidth + 5,\r\n  }),\r\n};\r\n\r\nconst boxVariants: Variants = {\r\n  normal: {\r\n    scale: 1,\r\n  },\r\n  hover: {\r\n    scale: 1.3,\r\n    y: -80,\r\n    transition: {\r\n      delay: 0.5,\r\n      duration: 0.1,\r\n      type: \"tween\",\r\n    },\r\n  },\r\n};\r\n\r\nconst infoVariants: Variants = {\r\n  hover: {\r\n    opacity: 1,\r\n    transition: {\r\n      delay: 0.5,\r\n      duration: 0.1,\r\n      type: \"tween\",\r\n    },\r\n  },\r\n};\r\n\r\nconst boxInfosVariants: Variants = {\r\n  hover: {\r\n    opacity: 1,\r\n    transition: {\r\n      delay: 0.3,\r\n      duration: 0.3,\r\n      type: \"tween\",\r\n    },\r\n  },\r\n};\r\n\r\nconst PrevIcon = styled(motion.img)`\r\n  position: absolute;\r\n  width: 60px;\r\n  top: 90px;\r\n  left: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst NextIcon = styled(motion.img)`\r\n  position: absolute;\r\n  width: 60px;\r\n  top: 90px;\r\n  right: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst IconVariants = {\r\n  initial: {\r\n    opacity: 0.3,\r\n  },\r\n  hover: {\r\n    opacity: 0.7,\r\n  },\r\n};\r\n\r\nconst offset = 6;\r\n\r\ninterface IProps {\r\n  dataType: string;\r\n  data?: IGetMovies;\r\n  isLoading?: boolean;\r\n}\r\n\r\nconst MovieSlider = ({ dataType, data, isLoading = false }: IProps) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [isNext, setIsNext] = useState(true);\r\n\r\n  // movie url 접근 or search url 접근인지 구분하기 위한 state\r\n  const [isSearched, setIsSearched] = useState(false);\r\n\r\n  // https://www.framer.com/docs/examples/#exit-animations\r\n  // 위의 예시 참조하기.\r\n  // 왼쪽/오른쪽 방향 전환을 위해선 custom, variants 의 x 축 진입과 나갈때도 이에 맞게 처리해야 한다.\r\n  const [hoverCardId, setHoverCardId] = useState<string | null>(null);\r\n\r\n  // 클릭시 해당 영화 모달 창\r\n  const bigMovieMatch: PathMatch<string> | null = useMatch(\"/movies/:id\");\r\n  // search 에서 해당 slider 모듈을 사용할 경우\r\n  const bigSearchedMovieMatch: PathMatch<string> | null = useMatch(\r\n    \"/search/movies/:movieId\"\r\n  );\r\n  console.log(\"bigSearchedMovieMatch: \", bigSearchedMovieMatch);\r\n\r\n  useEffect(() => {\r\n    console.log(\"[hoverCardId: \", hoverCardId);\r\n  }, [hoverCardId]);\r\n\r\n  useEffect(() => {\r\n    switch (dataType) {\r\n      case \"upcoming\":\r\n        setIsSearched(false);\r\n        return setTitle(\"UpComing\");\r\n      case \"now\":\r\n        setIsSearched(false);\r\n        return setTitle(\"Now\");\r\n      case \"popular\":\r\n        setIsSearched(false);\r\n        return setTitle(\"Popular\");\r\n      case \"toprated\":\r\n        setIsSearched(false);\r\n        return setTitle(\"TopRated\");\r\n      case \"search\":\r\n        setIsSearched(true);\r\n        return setTitle(\"Searched Movie\");\r\n      default:\r\n        break;\r\n    }\r\n  }, [dataType]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // 슬라이드 다음페이지 넘기기 위한 인덱스\r\n  const [index, setIndex] = useState(0);\r\n  // leaving: 토글 버튼 열고 닫는 flag\r\n  const [leaving, setLeaving] = useState(false);\r\n  // 토글 처리\r\n  const toggleLeaving = useCallback(() => setLeaving((prev) => !prev), []);\r\n\r\n  // 슬라이드 증가 처리\r\n  const increaseIndex = useCallback(() => {\r\n    if (data) {\r\n      if (leaving) return;\r\n      setIsNext(true);\r\n      toggleLeaving();\r\n      const totalMovies = data.results.length - 1;\r\n      const maxIndex = Math.floor(totalMovies / offset) - 1;\r\n      setIndex((prev) => (prev === maxIndex ? 0 : prev + 1));\r\n    }\r\n  }, [data, toggleLeaving, leaving]);\r\n  // 슬라이스 감소 처리\r\n  const decreaseIndex = useCallback(() => {\r\n    if (data) {\r\n      if (leaving) return;\r\n      setIsNext(false);\r\n      toggleLeaving();\r\n      const totalMovies = data.results.length - 1;\r\n      const maxIndex = Math.ceil(totalMovies / offset) - 1;\r\n      setIndex((prev) => (prev === 0 ? maxIndex - 1 : prev - 1));\r\n    }\r\n  }, [data, toggleLeaving, leaving]);\r\n\r\n  const onBoxClicked = useCallback(\r\n    (movieId: number) => {\r\n      if (isSearched) {\r\n        navigate(`/search/movies/${movieId}`);\r\n      } else {\r\n        navigate(`/movies/${movieId}`);\r\n      }\r\n    },\r\n    [navigate, isSearched]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {data && (\r\n        <>\r\n          <Slider>\r\n            <SliderTitle>{title}</SliderTitle>\r\n            <AnimatePresence\r\n              custom={isNext}\r\n              initial={false}\r\n              onExitComplete={toggleLeaving}\r\n            >\r\n              <Row\r\n                variants={rowVariants}\r\n                initial=\"hidden\"\r\n                animate=\"visible\"\r\n                exit=\"exit\"\r\n                transition={{ type: \"tween\", duration: 1 }}\r\n                key={index}\r\n                custom={isNext}\r\n              >\r\n                {data?.results\r\n                  .slice(1)\r\n                  .slice(offset * index, offset * index + offset)\r\n                  .map((movie) => (\r\n                    <Box\r\n                      layoutId={movie.id + dataType + \"\"} // 문자열로 처리하기 위한 '' 처리 + 다른 곳에서 같은 movieId 가 사용될 수 있기 때문에 dataType도 사용함.\r\n                      key={movie.id}\r\n                      variants={boxVariants}\r\n                      whileHover=\"hover\"\r\n                      initial=\"normal\"\r\n                      onClick={() => onBoxClicked(movie.id)}\r\n                      transition={{ type: \"tween\" }}\r\n                      bgphoto={makeImagePath(movie.backdrop_path, \"w500\")}\r\n                      onMouseEnter={() => setHoverCardId(movie.id + \"\")}\r\n                      onMouseLeave={() => setHoverCardId(null)}\r\n                    >\r\n                      {movie.id + \"\" === hoverCardId ? (\r\n                        \"\"\r\n                      ) : (\r\n                        <h4>\r\n                          {movie?.title?.toUpperCase()} ({movie.original_title})\r\n                        </h4>\r\n                      )}\r\n                      <Info variants={infoVariants}>\r\n                        <h4>\r\n                          {movie?.title?.toUpperCase()} ({movie.original_title})\r\n                        </h4>\r\n                        <BoxInfos variants={boxInfosVariants}>\r\n                          <span id=\"vote\">\r\n                            {movie.vote_average\r\n                              ? `★ ${movie.vote_average.toFixed(1)}`\r\n                              : \"No Rating Infos\"}\r\n                          </span>\r\n                        </BoxInfos>\r\n                      </Info>\r\n                    </Box>\r\n                  ))}\r\n              </Row>\r\n            </AnimatePresence>\r\n            <PrevIcon\r\n              src={prevImg}\r\n              variants={IconVariants}\r\n              initial=\"initial\"\r\n              whileHover=\"hover\"\r\n              onClick={decreaseIndex}\r\n            />\r\n            <NextIcon\r\n              src={nextImg}\r\n              variants={IconVariants}\r\n              initial=\"initial\"\r\n              whileHover=\"hover\"\r\n              onClick={increaseIndex}\r\n            />\r\n          </Slider>\r\n\r\n          {/* 영화 확대 및 상세 정보창 */}\r\n          <AnimatePresence>\r\n            {bigMovieMatch && (\r\n              <DetailMovie\r\n                movieId={bigMovieMatch?.params?.id + \"\"}\r\n                dataType={dataType}\r\n                isSearched={isSearched}\r\n              />\r\n            )}\r\n            {bigSearchedMovieMatch && (\r\n              <DetailMovie\r\n                movieId={bigSearchedMovieMatch?.params?.movieId + \"\"}\r\n                dataType={dataType}\r\n                isSearched={isSearched}\r\n              />\r\n            )}\r\n          </AnimatePresence>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieSlider;\r\n"],"names":["API_KEY","process","BASE_URL","getMovies","kind","fetch","json","getMovieDetail","id","getMovieCredit","Overlay","styled","motion","BigMovie","props","theme","black","lighter","BigCover","makeImagePath","posterPath","BigTitle","white","BigTitleGenre","BigOverview","CreditsInfoBox","CreditsInfo","CreditInfoImg","posterpath","CreditInfoCast","movieId","dataType","isSearched","console","log","navigate","useNavigate","scrollY","useScroll","useQuery","isCreditLoading","isLoading","creditData","data","isDetailLoading","detailData","useEffect","DirectorInfo","crew","find","item","known_for_department","CastInfos","cast","slice","onClickSearchCast","useCallback","name","window","open","onClick","exit","opacity","animate","style","top","get","layoutId","backdrop_path","title","original_title","genres","map","genre","overview","original_name","profile_path","castObj","Slider","SliderTitle","Row","Box","bgphoto","BoxInfos","red","Info","rowVariants","hidden","isNext","x","outerWidth","visible","boxVariants","normal","scale","hover","y","transition","delay","duration","type","infoVariants","boxInfosVariants","PrevIcon","NextIcon","IconVariants","initial","useState","setTitle","setIsNext","setIsSearched","hoverCardId","setHoverCardId","bigMovieMatch","useMatch","bigSearchedMovieMatch","index","setIndex","leaving","setLeaving","toggleLeaving","prev","increaseIndex","totalMovies","results","length","maxIndex","Math","floor","decreaseIndex","ceil","onBoxClicked","AnimatePresence","custom","onExitComplete","variants","movie","whileHover","onMouseEnter","onMouseLeave","toUpperCase","vote_average","toFixed","src","prevImg","nextImg","params"],"sourceRoot":""}