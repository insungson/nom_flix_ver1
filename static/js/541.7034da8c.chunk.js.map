{"version":3,"file":"static/js/541.7034da8c.chunk.js","mappings":"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","sources":["Apis/tvShowApi.ts","Components/tvs/detailTv.tsx","Components/tvs/tvSlider.tsx","Apis/searchApi.ts","Routes/Search.tsx"],"sourcesContent":["const API_KEY = process.env.REACT_APP_API_KEY;\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\ninterface ITv {\r\n  backdrop_path: string;\r\n  id: number;\r\n  name: string;\r\n  original_name: string;\r\n  overview: string;\r\n  vote_average: number;\r\n  first_air_date: string;\r\n  poster_path: string;\r\n}\r\n\r\nexport interface IGetTv {\r\n  page: number;\r\n  results: ITv[];\r\n  total_pages: number;\r\n  total_results: number;\r\n}\r\n\r\nexport interface IGetTvDetail {\r\n  backdrop_path: string;\r\n  poster_path: string;\r\n  name: string;\r\n  original_name: string;\r\n  overview: string;\r\n  vote_average: number;\r\n  id: number;\r\n  genres: [\r\n    {\r\n      id: number;\r\n      name: string;\r\n    }\r\n  ];\r\n  last_episode_to_air: {\r\n    air_date: string;\r\n    name: string;\r\n    episode_number: number;\r\n  };\r\n  next_episode_to_air: {\r\n    air_date: string;\r\n    name: string;\r\n    episode_number: number;\r\n  };\r\n}\r\nexport interface IGetTvCredit {\r\n  id: number;\r\n  cast: [\r\n    {\r\n      id: number;\r\n      name: string;\r\n      original_name: string;\r\n      character: string;\r\n      profile_path: string;\r\n    }\r\n  ];\r\n  crew: [\r\n    {\r\n      id: number;\r\n      known_for_department: string;\r\n      name: string;\r\n      original_name: string;\r\n      profile_path: string;\r\n    }\r\n  ];\r\n}\r\nexport async function getTv(kind: string) {\r\n  return await (\r\n    await fetch(`${BASE_URL}/tv/${kind}?api_key=${API_KEY}&language=ko&page=1`)\r\n  ).json();\r\n}\r\n\r\nexport async function getTvDetail(id: string) {\r\n  return await (\r\n    await fetch(`${BASE_URL}/tv/${id}?api_key=${API_KEY}&language=ko`)\r\n  ).json();\r\n}\r\nexport async function getTvCredit(id: string) {\r\n  return await (\r\n    await fetch(`${BASE_URL}/tv/${id}/credits?api_key=${API_KEY}&language=ko`)\r\n  ).json();\r\n}\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { makeImagePath } from \"@Utils/utils\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  getTvCredit,\r\n  getTvDetail,\r\n  IGetTvCredit,\r\n  IGetTvDetail,\r\n} from \"@Apis/tvShowApi\";\r\nimport { motion, useScroll } from \"framer-motion\";\r\n\r\nconst Overlay = styled(motion.div)`\r\n  position: fixed;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n`;\r\n\r\nconst BigTv = styled(motion.div)`\r\n  position: absolute;\r\n  width: 55vw;\r\n  height: 60vh;\r\n  left: 0;\r\n  right: 0;\r\n  margin: 0 auto;\r\n  border-radius: 15px;\r\n  background-color: ${(props) => props.theme.black.lighter};\r\n  /* 스크롤바 활성화 및 숨기기 */\r\n  overflow-y: scroll;\r\n  /* -ms-overflow-style: none;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  } */\r\n`;\r\n\r\nconst BigCover = styled.div<{ posterPath: string }>`\r\n  background-image: linear-gradient(to top, black, transparent),\r\n    url(${(props) => makeImagePath(props.posterPath, \"w500\")});\r\n  width: 100%;\r\n  background-size: cover;\r\n  background-position: center center;\r\n  height: 400px;\r\n`;\r\n\r\nconst BigTitle = styled.h3`\r\n  color: ${(props) => props.theme.white.lighter};\r\n  padding: 20px;\r\n  font-size: 40px;\r\n  position: relative;\r\n  text-align: center;\r\n  top: -300px;\r\n`;\r\n\r\nconst BigTitleGenre = styled.div`\r\n  /* margin-top: 30px; */\r\n  top: -250px;\r\n  text-align: center;\r\n  font-size: 18px;\r\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\r\n  position: relative;\r\n  span {\r\n    border-radius: 7px;\r\n    padding: 5px;\r\n    margin: 0 5px;\r\n    color: black;\r\n    font-weight: 800;\r\n    background-color: ${(props) => props.theme.white.lighter};\r\n  }\r\n`;\r\n\r\nconst BigOverview = styled.p`\r\n  margin-top: 30px;\r\n  padding: 20px;\r\n  position: relative;\r\n  top: -140px;\r\n  color: ${(props) => props.theme.white.lighter};\r\n`;\r\n\r\nconst CreditsInfoBox = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 0 30px;\r\n`;\r\n\r\nconst CreditsInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  #title {\r\n    font-size: 28px;\r\n    color: grey;\r\n    margin-bottom: 10px;\r\n  }\r\n  #name {\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\nconst CreditInfoImg = styled.div<{ posterpath: string }>`\r\n  background-image: url(${(props) => props.posterpath});\r\n  background-size: cover;\r\n  background-position: center center;\r\n  background-repeat: no-repeat;\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50px;\r\n  margin: 0 10px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst CreditInfoCast = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  #title {\r\n    font-size: 28px;\r\n    color: grey;\r\n    margin-bottom: 10px;\r\n  }\r\n  #name {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\ninterface IProps {\r\n  dataType: string;\r\n  tvId: string;\r\n  isSearched: boolean;\r\n}\r\n\r\nconst DetailTv = ({ dataType, tvId, isSearched }: IProps) => {\r\n  console.log(\"isSearched: \", isSearched);\r\n  const navigate = useNavigate();\r\n  const onOverayClick = () => (isSearched ? navigate(-1) : navigate(\"/tv\"));\r\n\r\n  const { scrollY } = useScroll();\r\n\r\n  // 캐스팅 정보 API data\r\n  const { isLoading: isCreditLoading, data: creditData } =\r\n    useQuery<IGetTvCredit>([\"movie\", `${dataType}_credit`], () =>\r\n      getTvCredit(tvId)\r\n    );\r\n  console.log(\"creditData: \", creditData);\r\n  // 상세정보 API data\r\n  const { isLoading: isDetailLoading, data: detailData } =\r\n    useQuery<IGetTvDetail>([\"movie\", `${dataType}_detail`], () =>\r\n      getTvDetail(tvId)\r\n    );\r\n  console.log(\"detailData: \", detailData);\r\n  const DirectorInfo = creditData?.crew.find(\r\n    (item) => item.known_for_department === \"Directing\"\r\n  );\r\n  const CastInfos = creditData?.cast.slice(0, 3);\r\n\r\n  const onClickSearchCast = useCallback((name: string) => {\r\n    window.open(`https://www.google.com/search?q=${name}`);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* 로딩화면 */}\r\n      {isCreditLoading && isDetailLoading ? (\r\n        <>Loading.....</>\r\n      ) : (\r\n        <>\r\n          {/* 껍대기 부분 */}\r\n          <Overlay\r\n            onClick={onOverayClick}\r\n            exit={{ opacity: 0 }} // 상위 컴포넌트에서 Animate Present 로 감쌌기 때문에 여기서 이 속성이 사용 가능하다.\r\n            animate={{ opacity: 1 }} // movieSlider 에서 사용한 Variants 속성 대신 비교를 위해 이렇게 사용하였다.\r\n          />\r\n          {/* 모달부분 */}\r\n          <BigTv style={{ top: scrollY.get() + 100 }} layoutId={tvId}>\r\n            {detailData && creditData && (\r\n              <>\r\n                <BigCover // movieSlider 에서 백그라운드 이미지 처리하는 방법과 비교해서 살펴보기\r\n                  posterPath={makeImagePath(detailData.backdrop_path, \"w500\")}\r\n                />\r\n                <BigTitle>{`${detailData?.name}(${detailData?.original_name})`}</BigTitle>\r\n                <BigTitleGenre>\r\n                  {detailData?.genres.map((genre) => (\r\n                    <span key={genre.id}>{genre.name}</span>\r\n                  ))}\r\n                </BigTitleGenre>\r\n                <BigOverview>{detailData?.overview}</BigOverview>\r\n                {/* 아래에 사진부분 추가처리해주기 */}\r\n                <CreditsInfoBox>\r\n                  {DirectorInfo && (\r\n                    <CreditsInfo\r\n                      onClick={() =>\r\n                        onClickSearchCast(DirectorInfo?.original_name)\r\n                      }\r\n                    >\r\n                      <span id=\"title\">Director</span>\r\n                      <CreditInfoImg\r\n                        posterpath={makeImagePath(\r\n                          DirectorInfo?.profile_path ?? \"\"\r\n                        )}\r\n                      />\r\n                      <span id=\"name\">{DirectorInfo?.original_name}</span>\r\n                    </CreditsInfo>\r\n                  )}\r\n                  <CreditInfoCast>\r\n                    {CastInfos?.map((castObj) => (\r\n                      <CreditsInfo\r\n                        key={castObj.id}\r\n                        onClick={() =>\r\n                          onClickSearchCast(castObj?.original_name)\r\n                        }\r\n                      >\r\n                        <span id=\"title\">Actor</span>\r\n                        <CreditInfoImg\r\n                          posterpath={makeImagePath(\r\n                            castObj?.profile_path ?? \"\"\r\n                          )}\r\n                        />\r\n                        <span id=\"name\">{castObj?.original_name}</span>\r\n                      </CreditsInfo>\r\n                    ))}\r\n                  </CreditInfoCast>\r\n                </CreditsInfoBox>\r\n              </>\r\n            )}\r\n          </BigTv>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DetailTv;\r\n","import styled from \"styled-components\";\r\nimport { AnimatePresence, motion, useScroll, Variants } from \"framer-motion\";\r\nimport { useState, useCallback, useEffect } from \"react\";\r\nimport { PathMatch, useMatch, useNavigate } from \"react-router-dom\";\r\nimport { IGetTv } from \"@Apis/tvShowApi\";\r\nimport { makeImagePath } from \"@Utils/utils\";\r\nimport nextImg from \"@images/next.png\";\r\nimport prevImg from \"@images/prev.png\";\r\nimport DetailTv from \"./detailTv\";\r\n\r\nconst Slider = styled.div`\r\n  position: relative;\r\n  top: -100px;\r\n  height: 50vh;\r\n`;\r\n\r\nconst SliderTitle = styled.h2`\r\n  margin-bottom: 20px;\r\n  padding-left: 10px;\r\n  color: white;\r\n  font-weight: 800;\r\n`;\r\n\r\nconst Row = styled(motion.div)`\r\n  display: grid;\r\n  gap: 5px; // 행과 열 사이의 간격을 설정한다. 첫번째가 행, 두번째가 열 의 간격이다.\r\n  grid-template-columns: repeat(\r\n    6,\r\n    1fr\r\n  ); // css grid 에서 열의 정의를 한다. repeat(): 반복되는 패턴을 짧게 줄여준다.\r\n  position: absolute; // 원래 포지션에서 흐름적인 요소가 없이 초기 컨테이너 기준으로 위치를 잡는다.\r\n  width: 100%;\r\n`;\r\n\r\nconst Box = styled(motion.div)<{ bgphoto: string }>`\r\n  background-color: white;\r\n  background-image: url(${(props) => props.bgphoto});\r\n  background-size: cover;\r\n  background-position: center center;\r\n  height: 200px;\r\n  h4 {\r\n    text-align: center;\r\n    font-size: 18px;\r\n  }\r\n  cursor: pointer;\r\n  &:first-child {\r\n    transform-origin: center left;\r\n  }\r\n  &:last-child {\r\n    transform-origin: center right;\r\n  }\r\n`;\r\n\r\nconst BoxInfos = styled(motion.div)`\r\n  position: relative;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  background-color: ${(props) => props.theme.white};\r\n  opacity: 0;\r\n  span {\r\n    text-align: center;\r\n    margin: 2px 0;\r\n    font-size: 6px;\r\n    font-weight: 600;\r\n    text-shadow: none;\r\n  }\r\n  #vote {\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n    color: ${(props) => props.theme.red};\r\n  }\r\n`;\r\n\r\nconst Info = styled(motion.div)`\r\n  padding: 10px;\r\n  background-color: ${(props) => props.theme.black.lighter};\r\n  opacity: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  bottom: 0;\r\n  h4 {\r\n    text-align: center;\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\n// custom 만 바꿔서는 왼쪽으로 움직이고, 오른쪽으로 움직이는게 동작이 되지 않는다!!.\r\n// 아래의 css 변수에서 x 축의 방향을 처리해 주고 custom 에서 방향을 정해줘야 한다!!\r\nconst rowVariants: Variants = {\r\n  hidden: (isNext: boolean) => ({\r\n    x: isNext ? window.outerWidth + 5 : -window.outerWidth - 5,\r\n  }),\r\n  visible: {\r\n    x: 0,\r\n  },\r\n  exit: (isNext: boolean) => ({\r\n    x: isNext ? -window.outerWidth - 5 : window.outerWidth + 5,\r\n  }),\r\n};\r\n\r\nconst boxVariants: Variants = {\r\n  normal: {\r\n    scale: 1,\r\n  },\r\n  hover: {\r\n    scale: 1.3,\r\n    y: -80,\r\n    transition: {\r\n      delay: 0.5,\r\n      duration: 0.1,\r\n      type: \"tween\",\r\n    },\r\n  },\r\n};\r\n\r\nconst infoVariants: Variants = {\r\n  hover: {\r\n    opacity: 1,\r\n    transition: {\r\n      delay: 0.5,\r\n      duration: 0.1,\r\n      type: \"tween\",\r\n    },\r\n  },\r\n};\r\n\r\nconst boxInfosVariants: Variants = {\r\n  hover: {\r\n    opacity: 1,\r\n    transition: {\r\n      delay: 0.3,\r\n      duration: 0.3,\r\n      type: \"tween\",\r\n    },\r\n  },\r\n};\r\n\r\nconst PrevIcon = styled(motion.img)`\r\n  position: absolute;\r\n  width: 60px;\r\n  top: 90px;\r\n  left: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst NextIcon = styled(motion.img)`\r\n  position: absolute;\r\n  width: 60px;\r\n  top: 90px;\r\n  right: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst IconVariants = {\r\n  initial: {\r\n    opacity: 0.3,\r\n  },\r\n  hover: {\r\n    opacity: 0.7,\r\n  },\r\n};\r\n\r\nconst offset = 6;\r\n\r\ninterface IProps {\r\n  dataType: string;\r\n  data?: IGetTv;\r\n  isLoading?: boolean;\r\n}\r\n\r\nconst TvSlider = ({ dataType, data, isLoading = false }: IProps) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [isNext, setIsNext] = useState(true);\r\n\r\n  // tv url 접근 or search url 접근인지 구분하기 위한 state\r\n  const [isSearched, setIsSearched] = useState(false);\r\n\r\n  const [hoverCardId, setHoverCardId] = useState<string | null>(null);\r\n\r\n  // 클릭시 해당 티비 모달 창\r\n  const bigTvMatch: PathMatch<string> | null = useMatch(\"/tv/:id\");\r\n  console.log(\"bigTvMatch: \", bigTvMatch);\r\n  // search 에서 해당 silder 모듈을 사용할 경우\r\n  const bigSearchedTvMatch: PathMatch<string> | null =\r\n    useMatch(\"/search/tv/:tvId\");\r\n  console.log(\"bigSearchedTvMatch: \", bigSearchedTvMatch);\r\n  useEffect(() => {\r\n    switch (dataType) {\r\n      case \"popular\":\r\n        setIsSearched(false);\r\n        return setTitle(\"Popular\");\r\n      case \"onair\":\r\n        setIsSearched(false);\r\n        return setTitle(\"OnAir\");\r\n      case \"top_rated\":\r\n        setIsSearched(false);\r\n        return setTitle(\"TopRated\");\r\n      case \"search\":\r\n        setIsSearched(true);\r\n        return setTitle(\"Searched TV Show\");\r\n      default:\r\n        break;\r\n    }\r\n  }, [dataType]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // 슬라이드 다음페이지 넘기기 위한 인덱스\r\n  const [index, setIndex] = useState(0);\r\n  // leaving: 토글 버튼 열고 닫는 flag\r\n  const [leaving, setLeaving] = useState(false);\r\n  // 토글 처리\r\n  const toggleLeaving = useCallback(() => setLeaving((prev) => !prev), []);\r\n\r\n  // 슬라이드 증가 처리\r\n  const increaseIndex = useCallback(() => {\r\n    if (data) {\r\n      if (leaving) return;\r\n      setIsNext(true);\r\n      toggleLeaving();\r\n      const totalMovies = data.results.length - 1;\r\n      const maxIndex = Math.floor(totalMovies / offset) - 1;\r\n      setIndex((prev) => (prev === maxIndex ? 0 : prev + 1));\r\n    }\r\n  }, [data, toggleLeaving, leaving]);\r\n  // 슬라이드 감소 처리\r\n  const decreaseIndex = useCallback(() => {\r\n    if (data) {\r\n      if (leaving) return;\r\n      setIsNext(false);\r\n      toggleLeaving();\r\n      const totalMovies = data.results.length - 1;\r\n      const maxIndex = Math.ceil(totalMovies / offset) - 1;\r\n      setIndex((prev) => (prev === 0 ? maxIndex - 1 : prev - 1));\r\n    }\r\n  }, [data, toggleLeaving, leaving]);\r\n\r\n  const onBoxClicked = useCallback(\r\n    (tvId: number) => {\r\n      if (isSearched) {\r\n        navigate(`/search/tv/${tvId}`);\r\n      } else {\r\n        navigate(`/tv/${tvId}`);\r\n      }\r\n    },\r\n    [navigate, isSearched]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {data && (\r\n        <>\r\n          <Slider>\r\n            <SliderTitle>{title}</SliderTitle>\r\n            <AnimatePresence\r\n              custom={isNext}\r\n              initial={false}\r\n              onExitComplete={toggleLeaving}\r\n            >\r\n              <Row\r\n                variants={rowVariants}\r\n                initial=\"hidden\"\r\n                animate=\"visible\"\r\n                exit=\"exit\"\r\n                transition={{ type: \"tween\", duration: 1 }}\r\n                key={index}\r\n                custom={isNext}\r\n              >\r\n                {data?.results\r\n                  .slice(1)\r\n                  .slice(offset * index, offset * index + offset)\r\n                  .map((tv) => (\r\n                    <Box\r\n                      layoutId={tv.id + dataType + \"\"} // 문자열로 처리하기 위한 '' 처리 + 다른 곳에서 같은 movieId 가 사용될 수 있기 때문에 dataType도 사용함.\r\n                      key={tv.id}\r\n                      variants={boxVariants}\r\n                      whileHover=\"hover\"\r\n                      initial=\"normal\"\r\n                      onClick={() => onBoxClicked(tv.id)}\r\n                      transition={{ type: \"tween\" }}\r\n                      bgphoto={makeImagePath(tv.backdrop_path, \"w500\")}\r\n                      onMouseEnter={() => setHoverCardId(tv.id + \"\")}\r\n                      onMouseLeave={() => setHoverCardId(null)}\r\n                    >\r\n                      {tv.id + \"\" === hoverCardId ? (\r\n                        \"\"\r\n                      ) : (\r\n                        <h4>\r\n                          {tv?.name?.toUpperCase()} ({tv?.original_name})\r\n                        </h4>\r\n                      )}\r\n                      <Info variants={infoVariants}>\r\n                        <h4>\r\n                          {tv?.name?.toUpperCase()} ({tv?.original_name})\r\n                        </h4>\r\n                        <BoxInfos variants={boxInfosVariants}>\r\n                          <span id=\"vote\">\r\n                            {tv?.vote_average\r\n                              ? `★ ${tv.vote_average.toFixed(1)}`\r\n                              : \"No Rating Infos\"}\r\n                          </span>\r\n                        </BoxInfos>\r\n                      </Info>\r\n                    </Box>\r\n                  ))}\r\n              </Row>\r\n            </AnimatePresence>\r\n            <PrevIcon\r\n              src={prevImg}\r\n              variants={IconVariants}\r\n              initial=\"initial\"\r\n              whileHover=\"hover\"\r\n              onClick={decreaseIndex}\r\n            />\r\n            <NextIcon\r\n              src={nextImg}\r\n              variants={IconVariants}\r\n              initial=\"initial\"\r\n              whileHover=\"hover\"\r\n              onClick={increaseIndex}\r\n            />\r\n          </Slider>\r\n          {/* TV 확대 및 상세 정보창 */}\r\n          <AnimatePresence>\r\n            {bigTvMatch && (\r\n              <DetailTv\r\n                tvId={bigTvMatch?.params?.id + \"\"}\r\n                dataType={dataType}\r\n                isSearched={isSearched}\r\n              />\r\n            )}\r\n            {bigSearchedTvMatch && (\r\n              <DetailTv\r\n                tvId={bigSearchedTvMatch?.params?.tvId + \"\"}\r\n                dataType={dataType}\r\n                isSearched={isSearched}\r\n              />\r\n            )}\r\n          </AnimatePresence>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TvSlider;\r\n","const API_KEY = process.env.REACT_APP_API_KEY;\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\ninterface ISearchResult {\r\n  id: number;\r\n  name?: string;\r\n  title?: string;\r\n}\r\n\r\nexport interface IGetSearchKey {\r\n  page: number;\r\n  results: ISearchResult[];\r\n  total_pages: number;\r\n  total_results: number;\r\n}\r\n\r\nexport async function getSearchKey(keyword: string) {\r\n  return await (\r\n    await fetch(\r\n      `${BASE_URL}/search/multi?api_key=${API_KEY}&language=ko&query=${keyword}&page=1&include_adult=false&region=KR`\r\n    )\r\n  ).json();\r\n}\r\n\r\nexport async function getSearchMovie(keyword: string) {\r\n  return await (\r\n    await fetch(\r\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&language=ko&query=${keyword}&page=1&include_adult=false&region=KR`\r\n    )\r\n  ).json();\r\n}\r\nexport async function getSearchTv(keyword: string) {\r\n  return await (\r\n    await fetch(\r\n      `${BASE_URL}/search/tv?api_key=${API_KEY}&language=ko&&page=1&query=${keyword}&include_adult=false`\r\n    )\r\n  ).json();\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { makeImagePath } from \"@Utils/utils\";\r\nimport {\r\n  getSearchKey,\r\n  getSearchMovie,\r\n  getSearchTv,\r\n  IGetSearchKey,\r\n} from \"@Apis/searchApi\";\r\nimport { IGetMovies } from \"@Apis/movieApi\";\r\nimport { IGetTv } from \"@Apis/tvShowApi\";\r\nimport TvSlider from \"@Components/tvs/tvSlider\";\r\nimport MovieSlider from \"@Components/movies/movieSlider\";\r\nimport {\r\n  PathMatch,\r\n  useMatch,\r\n  useNavigate,\r\n  useParams,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 80px;\r\n  height: 40vh;\r\n`;\r\nconst KeywordWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  text-align: center;\r\n  height: 250px;\r\n  color: white;\r\n  margin-top: 20px;\r\n  padding-top: 40px;\r\n  padding-left: 20px;\r\n`;\r\nconst Title = styled.h2`\r\n  color: yellowgreen;\r\n`;\r\nconst KeywordResult = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(6, 1fr);\r\n  margin: 10px;\r\n`;\r\nconst Keyword = styled.div`\r\n  margin: 10px;\r\n  font-size: 18px;\r\n  color: rgba(255, 255, 255, 0.7);\r\n`;\r\nconst NormalScreen = styled.div`\r\n  margin-top: 50vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  span:nth-child(2) {\r\n    font-size: 18px;\r\n    margin-top: 20px;\r\n  }\r\n`;\r\n\r\nconst Search = () => {\r\n  // const searchMatch: PathMatch<string> | null = useMatch(\"/search/:keyword\");\r\n  const [searchedKeyword, setSearchedKeyword] = useState<string | null>(null); // 검색된 keyword\r\n\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (!!location) {\r\n      if (!!location?.search) {\r\n        const keyword = location.search.split(\"=\");\r\n        if (keyword?.length > 1) {\r\n          setSearchedKeyword(keyword[1]);\r\n        } else {\r\n          setSearchedKeyword(null);\r\n        }\r\n      }\r\n    }\r\n  }, [location]);\r\n\r\n  const { data: keywordData, isLoading: keywordDataLoading } =\r\n    useQuery<IGetSearchKey>(\r\n      [\"search\", \"keyword\"],\r\n      //@ts-ignore\r\n      () => getSearchKey(searchedKeyword),\r\n      { enabled: !!searchedKeyword }\r\n    );\r\n\r\n  const { data: movieSearchedData, isLoading: movieSearchDataLoading } =\r\n    useQuery<IGetMovies>(\r\n      [\"search\", \"movie\"],\r\n      //@ts-ignore\r\n      () => getSearchMovie(searchedKeyword),\r\n      { enabled: !!searchedKeyword }\r\n    );\r\n  console.log(\"movieSearchedData: \", movieSearchedData);\r\n\r\n  const { data: tvSearchedData, isLoading: tvSearchedDataLoading } =\r\n    useQuery<IGetTv>(\r\n      [\"search\", \"tv\"],\r\n      //@ts-ignore\r\n      () => getSearchTv(searchedKeyword),\r\n      { enabled: !!searchedKeyword }\r\n    );\r\n\r\n  return (\r\n    <Wrapper>\r\n      {keywordDataLoading && movieSearchDataLoading ? (\r\n        <>Loading....</>\r\n      ) : (\r\n        <>\r\n          {keywordData?.results && tvSearchedData?.results ? (\r\n            <>\r\n              <KeywordWrapper>\r\n                <Title>Keyword Searched Result List</Title>\r\n                <KeywordResult>\r\n                  {keywordData.results.slice(0, 18).map((keywordObj, index) => (\r\n                    <Keyword key={index}>\r\n                      {keywordObj?.name ? keywordObj.name : keywordObj?.title}\r\n                    </Keyword>\r\n                  ))}\r\n                </KeywordResult>\r\n              </KeywordWrapper>\r\n              {movieSearchDataLoading ? (\r\n                <>Loading...</>\r\n              ) : (\r\n                movieSearchedData?.results && (\r\n                  <MovieSlider dataType=\"search\" data={movieSearchedData} />\r\n                )\r\n              )}\r\n              {tvSearchedDataLoading ? (\r\n                <>Loading...</>\r\n              ) : (\r\n                tvSearchedData?.results && (\r\n                  <TvSlider dataType=\"search\" data={tvSearchedData} />\r\n                )\r\n              )}\r\n            </>\r\n          ) : (\r\n            <NormalScreen>\r\n              <span>There is no Searched Result.</span>\r\n              <span>\r\n                You have to click search icon on the top right for searching\r\n                keyword.\r\n              </span>\r\n            </NormalScreen>\r\n          )}\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"],"names":["API_KEY","process","BASE_URL","getTv","kind","fetch","json","getTvDetail","id","getTvCredit","Overlay","styled","motion","BigTv","props","theme","black","lighter","BigCover","makeImagePath","posterPath","BigTitle","white","BigTitleGenre","BigOverview","CreditsInfoBox","CreditsInfo","CreditInfoImg","posterpath","CreditInfoCast","dataType","tvId","isSearched","console","log","navigate","useNavigate","scrollY","useScroll","useQuery","isCreditLoading","isLoading","creditData","data","isDetailLoading","detailData","DirectorInfo","crew","find","item","known_for_department","CastInfos","cast","slice","onClickSearchCast","useCallback","name","window","open","onClick","exit","opacity","animate","style","top","get","layoutId","backdrop_path","original_name","genres","map","genre","overview","profile_path","castObj","Slider","SliderTitle","Row","Box","bgphoto","BoxInfos","red","Info","rowVariants","hidden","isNext","x","outerWidth","visible","boxVariants","normal","scale","hover","y","transition","delay","duration","type","infoVariants","boxInfosVariants","PrevIcon","NextIcon","IconVariants","initial","useState","title","setTitle","setIsNext","setIsSearched","hoverCardId","setHoverCardId","bigTvMatch","useMatch","bigSearchedTvMatch","useEffect","index","setIndex","leaving","setLeaving","toggleLeaving","prev","increaseIndex","totalMovies","results","length","maxIndex","Math","floor","decreaseIndex","ceil","onBoxClicked","AnimatePresence","custom","onExitComplete","variants","tv","whileHover","onMouseEnter","onMouseLeave","toUpperCase","vote_average","toFixed","src","prevImg","nextImg","params","keyword","Wrapper","KeywordWrapper","Title","KeywordResult","Keyword","NormalScreen","searchedKeyword","setSearchedKeyword","location","useLocation","search","split","getSearchKey","enabled","keywordData","keywordDataLoading","getSearchMovie","movieSearchedData","movieSearchDataLoading","getSearchTv","tvSearchedData","tvSearchedDataLoading","keywordObj"],"sourceRoot":""}